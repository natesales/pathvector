package autodoc

import (
	"fmt"
	"reflect"
	"sort"
	"strings"
	"unicode"

	"github.com/natesales/pathvector/pkg/config"
	"github.com/natesales/pathvector/pkg/util/log"
)

func sanitizeConfigName(s string) string {
	out := s
	out = strings.ReplaceAll(out, "*", "")
	out = strings.ReplaceAll(out, "config.", "")
	return out
}

func addLink(s string) string {
	if unicode.IsUpper(rune(s[0])) {
		// Add -1 suffix to link to the subsequent hash
		return fmt.Sprintf("[%s](#%s-1)", s, strings.ToLower(s))
	}
	return s
}

// byReflectType implements sort.Interface to sort a slice of reflect.Type elements by string name
type byReflectType []reflect.Type

func (s byReflectType) Len() int {
	return len(s)
}
func (s byReflectType) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
func (s byReflectType) Less(i, j int) bool {
	return s[i].String() < s[j].String()
}

func documentConfigTypes(t reflect.Type, output bool) {
	childTypesSet := map[reflect.Type]bool{}
	if output {
		log.Println("## " + sanitizeConfigName(t.String()))
	}
	// Handle pointer types
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		description := field.Tag.Get("description")
		key := field.Tag.Get("yaml")
		validation := field.Tag.Get("validate")
		fDefault := field.Tag.Get("default")
		if fDefault == "-" {
			fDefault = ""
		}

		if description == "" {
			log.Fatalf("Code error: %s doesn't have a description", field.Name)
		} else if description != "-" { // Ignore descriptions that are -
			if strings.Contains(field.Type.String(), "config.") { // If the type is a config struct
				if field.Type.Kind() == reflect.Map || field.Type.Kind() == reflect.Slice { // Extract the element if the type is a map or slice and add to set (reflect.Type to bool map)
					childTypesSet[field.Type.Elem()] = true
				} else {
					childTypesSet[field.Type] = true
				}
			}
			if output {
				log.Printf(`### `+"`"+`%s`+"`"+`

%s

| Type | Default | Validation |
|------|---------|------------|
| %s   | %s      | %s         |

`, key, description, addLink(sanitizeConfigName(field.Type.String())), fDefault, validation)
			}
			// log.Printf("| %s | %s | %s | %s | %s |\n", key, addLink(sanitizeConfigName(field.Type.String())), fDefault, validation, description)
		}
	}
	if output {
		log.Println()
	}

	// Convert the set into a slice and sort it
	var childTypesSlice []reflect.Type
	for childType := range childTypesSet {
		childTypesSlice = append(childTypesSlice, childType)
	}
	sort.Sort(byReflectType(childTypesSlice))

	for _, childType := range childTypesSlice {
		documentConfigTypes(childType, output)
	}
}

// DocumentConfig prints a YAML file with autogenerated configuration documentation
func DocumentConfig(output bool) {
	if output {
		log.Println("# Configuration")
	}
	documentConfigTypes(reflect.TypeOf(config.Config{}), output)
}
