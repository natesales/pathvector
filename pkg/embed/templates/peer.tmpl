{{ $peer := .Peer }}{{ $peerName := .Name }}{{ $global := .Config }}

# {{ .Name }} AS{{ $peer.ASN }}

define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_IMPORT_v4 = {{ $peer.ImportLimit4 }};
define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_IMPORT_v6 = {{ $peer.ImportLimit6 }};

{{ if IntDeref $peer.ReceiveLimit4 }}define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_RECEIVE_v4 = {{ $peer.ReceiveLimit4 }};{{ end }}
{{ if IntDeref $peer.ReceiveLimit6 }}define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_RECEIVE_v6 = {{ $peer.ReceiveLimit6 }};{{ end }}
{{ if IntDeref $peer.ExportLimit4 }}define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_EXPORT_v4 = {{ $peer.ExportLimit4 }};{{ end }}
{{ if IntDeref $peer.ExportLimit6 }}define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_EXPORT_v6 = {{ $peer.ExportLimit6 }};{{ end }}

{{ if not (Empty $peer.PrefixSet4) }}
define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_PFX_v4 = [
{{ BirdSet $peer.PrefixSet4 }}
];
{{ else }}
define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_PFX_v4 = -empty-;
{{ end }}

{{ if not (Empty $peer.PrefixSet6) }}
define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_PFX_v6 = [
{{ BirdSet $peer.PrefixSet6 }}
];
{{ else }}
define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_PFX_v6 = -empty-;
{{ end }}

{{ if BoolDeref $peer.FilterASSet }}
define AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_AS_SET_MEMBERS = [
{{ BirdASSet $peer.ASSetMembers }}
];
{{ end }}

{{ range $i, $neighbor := $peer.NeighborIPs }}
{{ $af := "4" }}{{ if Contains $neighbor ":" }}{{ $af = "6" }}{{ end }}
{{ $neighborNoIface := SplitFirst $neighbor "%" }}
protocol bgp {{ UniqueProtocolName $peer.ProtocolName $peerName $af $peer.ASN $peer.Tags }} {
    local{{ if eq $af "4" }}{{ if $peer.Listen4 }} {{ $peer.Listen4 }}{{ end }}{{ else }}{{ if $peer.Listen6 }} {{ $peer.Listen6 }}{{ end }}{{ end }} as {{ if IntDeref $peer.LocalASN }}{{ IntDeref $peer.LocalASN }}{{ else }}ASN{{ end }}{{ if $peer.LocalPort }} port {{ $peer.LocalPort }}{{ end }};
    neighbor {{ $neighbor }} as {{ $peer.ASN }}{{ if $peer.NeighborPort }} port {{ $peer.NeighborPort }}{{ end }};
    {{ if StrDeref $peer.Description }}description "{{ StrDeref $peer.Description }}";{{ end }}
    {{ if BoolDeref $peer.Disabled }}disabled;{{ end }}
    {{ if BoolDeref $peer.Passive }}passive;{{ end }}
    {{ if BoolDeref $peer.Direct }}direct;{{ end }}
    {{ if BoolDeref $peer.Multihop }}multihop 255;{{ end }}
    {{ if StrDeref $peer.Password }}password "{{ StrDeref $peer.Password }}";{{ end }}
    {{ if BoolDeref $peer.RSClient }}rs client;{{ end }}
    {{ if BoolDeref $peer.RRClient }}rr client;{{ end }}
    {{ if BoolDeref $peer.BFD }}bfd on;{{ end }}
    {{ if BoolDeref $peer.AllowLocalAS }}allow local as ASN;{{ end }}
    {{ if BoolDeref $peer.TTLSecurity }}ttl security on;{{ end }}
    {{ if BoolDeref $peer.ConfederationMember }}confederation member yes;{{ end }}
    {{ if BoolDeref $peer.PreferOlderRoutes }}prefer older on;{{ end }}
    {{ if StrDeref $peer.Role }}local role {{ StrDeref $peer.Role }};{{ end }}
    {{ if BoolDeref $peer.RequireRoles }}require roles;{{ end }}
    {{ if not (BoolDeref $peer.InterpretCommunities) }}interpret communities off;{{ end }}
    {{ if IntDeref $peer.Confederation }}confederation {{ IntDeref $peer.Confederation }};{{ end }}
    {{ if IntDeref $peer.DefaultLocalPref }}default bgp_local_pref {{ IntDeref $peer.DefaultLocalPref }};{{ end }}
    {{ if BoolDeref $peer.AdvertiseHostname }}advertise hostname on;{{ end }}
    {{ StrDeref $peer.SessionGlobal }}
    {{ $protocols := MakeSlice }}
    {{ if BoolDeref $peer.MPUnicast46 }}
        {{ $protocols = MakeSlice "4" "6" }}
    {{ else }}
        {{ $protocols = MakeSlice $af }}
    {{ end }}
    {{ range $i, $af := $protocols }}
    ipv{{ $af }} {
        {{ if BoolDeref $global.KeepFiltered }}import keep filtered;{{ end }}
        import limit AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_IMPORT_v{{ $af }} action {{ $peer.ImportLimitTripAction }};

        {{ if (or (and (IntDeref $peer.ReceiveLimit4) (eq $af "4")) (and (IntDeref $peer.ReceiveLimit6) (eq $af "6"))) }}
        receive limit AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_RECEIVE_v{{ $af }} action {{ $peer.ReceiveLimitTripAction }};
        {{ end }}

        {{ if (or (and (IntDeref $peer.ExportLimit4) (eq $af "4")) (and (IntDeref $peer.ExportLimit6) (eq $af "6"))) }}
        export limit AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_EXPORT_v{{ $af }} action {{ $peer.ExportLimitTripAction }};
        {{ end }}

        {{ if BoolDeref $peer.NextHopSelf }}next hop self;{{ end }}
        {{ if BoolDeref $peer.NextHopSelfEBGP }}next hop self ebgp;{{ end }}
        {{ if BoolDeref $peer.NextHopSelfIBGP }}next hop self ibgp;{{ end }}
        {{ if BoolDeref $peer.AddPathTx }}add paths tx;{{ end }}
        {{ if BoolDeref $peer.AddPathRx }}add paths rx;{{ end }}
        {{ if BoolDeref $peer.DisableAfterError }}disable after error on;{{ end }}
        import filter {
            {{ if $global.NoAccept }}reject; # no-accept: true{{ end }}
            {{ if (not (BoolDeref $peer.Import)) }}reject; # import: false{{ end }}

            {{ StrDeref $peer.PreImportFilter }}

            {{ if BoolDeref $peer.FilterBogonRoutes }}reject_bogon_routes();{{ end }}
            {{ if BoolDeref $peer.FilterBogonASNs }}reject_bogon_asns();{{ end }}
            {{ if BoolDeref $peer.FilterPrefixLength }}reject_out_of_bounds_routes();{{ end }}
            {{ if BoolDeref $peer.FilterRPKI }}reject_rpki_invalid();{{ end }}
            {{ if BoolDeref $peer.StrictRPKI }}force_rpki_strict();{{ end }}
            {{ if BoolDeref $peer.FilterNeverViaRouteServers }}reject_never_via_route_servers();{{ end }}
            {{ if BoolDeref $peer.EnforceFirstAS }}enforce_first_as({{ $peer.ASN }});{{ end }}
            {{ if BoolDeref $peer.EnforcePeerNexthop }}enforce_peer_nexthop({{ $neighborNoIface }});{{ end }}
            {{ if BoolDeref $peer.FilterTransitASNs }}reject_transit_paths();{{ end }}
            {{ if or (not (Empty $peer.PrefixSet4)) (not (Empty $peer.PrefixSet6)) }}if !(net ~ AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_PFX_v{{ $af }}) then { _reject("not in prefix set"); }{{ end }}
            {{ if BoolDeref $peer.FilterASSet }}if !(bgp_path.last ~ AS{{ $peer.ASN }}_{{ $peer.ProtocolName }}_AS_SET_MEMBERS) then { _reject("not in AS set"); }{{ end }}
            {{ if BoolDeref $peer.FilterBlocklist }}reject_blocklist();{{ end }}

            {{/* Transit Locking */}}
            {{ if StrSliceDeref $peer.TransitLock }}
            if !((bgp_path ~ [= {{ $peer.ASN }}+ =]) || {{$transits := len (StrSliceDeref $peer.TransitLock)}}{{ range $i, $provider := StrSliceDeref $peer.TransitLock }}bgp_path ~ [= * {{ $provider }} {{ $peer.ASN }} * =]{{ if not (Last $i $transits) }} || {{end}}{{ end }}) then {
                _reject("not in transit lock list");
            }
            {{ end }}

            {{/* ASPA */}}
            {{ if (and (BoolDeref $peer.FilterASPA) (Uint32SliceMapDeref $global.AuthorizedProviders) (U32MapContains $peer.ASN $global.AuthorizedProviders)) }}
            {{ ASPAFilter $peer.ASN $global.AuthorizedProviders }}
            {{ end }}

            {{ StrDeref $peer.PostImportFilter }}

            {{ if BoolDeref $peer.ForcePeerNexthop }}bgp_next_hop = {{ $neighborNoIface }};{{ end }}

            {{ if StrDeref $peer.ImportNextHop }}
            bgp_next_hop = {{ StrDeref $peer.ImportNextHop }};
            gw = {{ StrDeref $peer.ImportNextHop }};
            {{ end }}

            {{ range $i, $pattern := StringSliceIter $peer.RemoveStandardCommunities }}
            bgp_community.delete([({{ $pattern }})]);
            {{ end }}
            {{ range $i, $pattern := StringSliceIter $peer.RemoveLargeCommunities }}
            bgp_large_community.delete([({{ $pattern }})]);
            {{ end }}

            {{ if IntDeref $peer.RemoveAllCommunities }}
            {{ if lt (IntDeref $peer.RemoveAllCommunities) 65535 }}
            bgp_community.delete([({{ IntDeref $peer.RemoveAllCommunities }}, *)]);
            {{ end }}
            bgp_large_community.delete([({{ IntDeref $peer.RemoveAllCommunities }}, *, *)]);
            {{ end }}

            {{ if not (IntDeref $peer.DefaultLocalPref) }}
            {{ if BoolDeref $peer.SetLocalPref }}bgp_local_pref = {{ $peer.LocalPref }}; # pathvector:localpref{{ end }}
            {{ end }}

            {{ if IntDeref $peer.LocalPref4 }}if (net.type = NET_IP4) then { bgp_local_pref = {{ $peer.LocalPref4 }}; }{{ end }}
            {{ if IntDeref $peer.LocalPref6 }}if (net.type = NET_IP6) then { bgp_local_pref = {{ $peer.LocalPref6 }}; }{{ end }}

            {{ range $community, $pref := StringUint32MapDeref $peer.StandardCommunityPrefs }}
            if (({{ $community }}) ~ bgp_community) then { bgp_local_pref = {{ $pref }}; }
            {{ end }}
            {{ range $community, $pref := StringUint32MapDeref $peer.LargeCommunityPrefs }}
            if (({{ $community }}) ~ bgp_large_community) then { bgp_local_pref = {{ $pref }}; }
            {{ end }}

            {{ range $asn, $pref := Uint32MapDeref $peer.ASPrefs }}
            if ({{ $asn }} ~ bgp_path) then { bgp_local_pref = {{ $pref }}; }
            {{ end }}

            {{ if BoolDeref $peer.AllowBlackholeCommunity }}process_blackholes();{{ end }}
            {{ if BoolDeref $peer.HonorGracefulShutdown }}honor_graceful_shutdown();{{ end }}

            {{ range $i, $community := StringSliceIter $peer.ImportStandardCommunities }}
            bgp_community.add(({{ $community }}));
            {{ end }}
            {{ range $i, $community := StringSliceIter $peer.ImportLargeCommunities }}
            bgp_large_community.add(({{ $community }}));
            {{ end }}

            {{ range $i, $community := StringSliceIter $global.ImportStandardCommunities }}
            bgp_community.add(({{ $community }}));
            {{ end }}
            {{ range $i, $community := StringSliceIter $global.ImportLargeCommunities }}
            bgp_large_community.add(({{ $community }}));
            {{ end }}

            {{ if BoolDeref $peer.BlackholeIn }}
            set_blackhole();
            {{ end }}

            {{ StrDeref $peer.PreImportAccept }}
            accept;
        };

        export filter {
            {{ if $global.NoAnnounce }}reject; # no-announce: true{{ end }}
            {{ if (not (BoolDeref $peer.Export)) }}reject; # export: false{{ end }}

            {{ if not (Empty $peer.DontAnnounce) }}
            if (net ~ [
            {{ BirdSet $peer.DontAnnounce }}
            ]) then _reject("prefix in dont-announce list");
            {{ end }}

            {{ range $prefix, $communities := StrSliceMapDeref $peer.PrefixStandardCommunities }}
            if (net = {{ $prefix }}) then {
                {{ range $i, $community := $communities }}
                bgp_community.add(({{ $community }}));
                {{ end }}
            }
            {{ end }}

            {{ range $prefix, $communities := StrSliceMapDeref $peer.PrefixLargeCommunities }}
            if (net = {{ $prefix }}) then {
                {{ range $i, $community := $communities }}
                bgp_large_community.add(({{ $community }}));
                {{ end }}
            }
            {{ end }}

            {{ StrDeref $peer.PreExport }}

            {{ range $i, $community := StringSliceIter $peer.ExportStandardCommunities }}
            bgp_community.add(({{ $community }}));
            {{ end }}
            {{ range $i, $community := StringSliceIter $peer.ExportLargeCommunities }}
            bgp_large_community.add(({{ $community }}));
            {{ end }}

            {{ range $i, $community := StringSliceIter $global.ExportStandardCommunities }}
            bgp_community.add(({{ $community }}));
            {{ end }}
            {{ range $i, $community := StringSliceIter $global.ExportLargeCommunities }}
            bgp_large_community.add(({{ $community }}));
            {{ end }}

            {{ if BoolDeref $peer.RemovePrivateASNs }}
            remove_private_asns();
            {{ end }}

            {{ if BoolDeref $peer.ClearPath }}bgp_path.empty;{{ end }}
            {{ range $i := Iterate $peer.Prepends }}
            bgp_path.prepend(ASN);
            {{ end }}
            {{ range $i := Uint32SliceDeref $peer.PrependPath }}
            bgp_path.prepend({{ $i }});
            {{ end }}

            {{ if StrDeref $peer.ExportNextHop }}bgp_next_hop = {{ StrDeref $peer.ExportNextHop }};{{ end }}

            {{ if BoolDeref $peer.BlackholeOut }}
            set_blackhole();
            {{ end }}

            {{ if not (Empty $peer.OnlyAnnounce) }}
            if !(net ~ [
            {{ BirdSet $peer.OnlyAnnounce }}
            ]) then _reject("prefix not in only-announce list");
            {{ end }}

            {{ if BoolDeref $peer.AnnounceOriginated }}
            accept_local();
            {{ end }}

            {{ range $i, $community := StringSliceIter $peer.AnnounceStandardCommunities }}
            if (({{ $community }}) ~ bgp_community) then accept;
            {{ end }}

            {{ range $i, $community := StringSliceIter $peer.AnnounceLargeCommunities }}
            if (({{ $community }}) ~ bgp_large_community) then accept;
            {{ end }}

            {{ if BoolDeref $peer.AnnounceDefault }}
            # Send default route
            if (proto = "default{{ $af }}") then accept;
            {{ end }}

            {{ StrDeref $peer.PreExportFinal }}
            {{ if BoolDeref $peer.AnnounceAll }}
            accept;
            {{ else }}
            reject;
            {{ end }}
        };
    };
    {{ end }}
}
{{ end }}
